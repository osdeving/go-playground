//go:build ignore

package main

import (
	"fmt"
	"log"
	"strconv"

	"github.com/fatih/color"
	"github.com/jaypipes/ghw"
)

func main() {
	// Obter informa√ß√µes de CPU
	cpuInfo, err := ghw.CPU()
	if err != nil {
		log.Printf("Erro ao obter informa√ß√µes da CPU: %v", err)
	}

	// Obter informa√ß√µes de mem√≥ria
	memInfo, err := ghw.Memory()
	if err != nil {
		log.Printf("Erro ao obter informa√ß√µes da mem√≥ria: %v", err)
	}

	// Obter informa√ß√µes de dispositivos de armazenamento
	// blockInfo, err := ghw.Block()
	// if err != nil {
	// 	log.Printf("Erro ao obter informa√ß√µes dos discos: %v", err)
	// }

	// Configurando cores com fatih/color
	title := color.New(color.FgHiGreen, color.Bold).SprintFunc()
	label := color.New(color.FgCyan).SprintFunc()
	infoColor := color.New(color.FgWhite).SprintFunc()

	// Cabe√ßalho
	fmt.Println(title("‚öôÔ∏è  Informa√ß√µes do Sistema"))
	fmt.Println("------------------------------------")

	// Se√ß√£o CPU
	fmt.Println(title("üñ•Ô∏è  CPU:"))
	if cpuInfo != nil && len(cpuInfo.Processors) > 0 {
		proc := cpuInfo.Processors[0]
		vendor := "Desconhecido"
		if proc.Vendor != "" {
			vendor = proc.Vendor
		}
		fmt.Printf("  %s %s %s\n", label("Modelo:"), infoColor(vendor), infoColor(proc.Model))
		fmt.Printf("  %s %d n√∫cleos f√≠sicos, %d n√∫cleos l√≥gicos\n", label("Cores:"), proc.NumCores, proc.NumThreads)
		fmt.Printf("  %s %s\n", label("Frequ√™ncia:"), infoColor("N√£o dispon√≠vel"))
	} else {
		fmt.Println("  Informa√ß√£o da CPU n√£o dispon√≠vel.")
	}

	// Se√ß√£o Mem√≥ria
	fmt.Println(title("\nüíæ Mem√≥ria:"))
	if memInfo != nil {
		totalGB := float64(memInfo.TotalUsableBytes) / 1e9
		fmt.Printf("  %s %.2f GB\n", label("Total:"), totalGB)
		// A frequ√™ncia da mem√≥ria pode n√£o estar dispon√≠vel via ghw
		fmt.Printf("  %s %s\n", label("Frequ√™ncia:"), infoColor("N√£o dispon√≠vel"))
	} else {
		fmt.Println("  Informa√ß√£o da mem√≥ria n√£o dispon√≠vel.")
	}

	// Se√ß√£o SSD
	// fmt.Println(title("\nüìÄ Armazenamento (SSD):"))
	// if blockInfo != nil {
	// 	foundSSD := false
	// 	for _, disk := range blockInfo.Disks {
	// 		// No WSL e outros ambientes, podemos precisar verificar diferentes tipos
	// 		if disk.DriveType == ghw.DRIVE_TYPE_SSD || disk.DriveType == ghw.DRIVE_TYPE_NVME {
	// 			foundSSD = true
	// 			model := disk.Model
	// 			if model == "" {
	// 				model = "Dispositivo desconhecido"
	// 			}
	// 			fmt.Printf("  %s %s\n", label("Modelo:"), infoColor(model))
	// 			capGB := float64(disk.SizeBytes) / 1e9
	// 			fmt.Printf("  %s %.2f GB\n", label("Capacidade:"), capGB)
	// 			fmt.Printf("  %s %s\n", label("Velocidade:"), infoColor("N√£o dispon√≠vel"))
	// 			fmt.Println("")
	// 		}
	// 	}
	// 	if !foundSSD {
	// 		fmt.Println("  Nenhum SSD encontrado.")
	// 	}
	// } else {
	// 	fmt.Println("  Informa√ß√£o do armazenamento n√£o dispon√≠vel.")
	// }

	// Se√ß√£o GPU
	fmt.Println(title("üéÆ GPU:"))
	pciInfo, err := ghw.PCI()
	if err != nil {
		log.Printf("Erro ao obter informa√ß√µes PCI: %v", err)
	} else {
		foundGPU := false
		for _, device := range pciInfo.Devices {
			// Classe 0x03 √© para controladores de v√≠deo/gr√°ficos
			classID, err := strconv.ParseInt(device.Class.ID, 16, 64)
			if err == nil && classID == 0x03 {
				foundGPU = true
				fmt.Printf("  %s %s\n", label("Modelo:"), infoColor(device.Product.Name))
			}
		}
		if !foundGPU {
			fmt.Println("  Informa√ß√£o da GPU n√£o dispon√≠vel.")
		}
	}

	fmt.Println("------------------------------------")
}
